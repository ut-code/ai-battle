openapi: 3.0.3
info:
  title: Code vs Code
  version: 1.0.0
servers:
  - url: https://utcode.net/code-vs-code
paths:
  /user:
    get:
      tags:
        - user
      summary: Get all users
      responses:
        '200':
          description: array of user objects
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/User'
    put:
      tags:
        - user
      summary: Change user name
      parameters:
        - name: Id
          in: query
          description: user ID
          required: true
          schema:
            type: integer
      requestBody:
        description: new user name
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '200':
          description: successful operation
    post:
      tags:
        - user
      summary: Create user
      parameters: []
      requestBody:
        description: user name
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: user object
          content:
            application/json:
              schema: 
                  $ref: '#/components/schemas/User'
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by ID
      parameters:
        - name: userId
          in: path
          description: user ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: user object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
  /program:
    put:
      tags:
        - program
      summary: Upload program
      parameters: []
      requestBody:
        description: userID and program
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Program'
      responses:
        '200':
          description: successful operation
  /swap-rank:
    post:
      tags:
        - projector
      summary: Swap ranks of two users
      parameters: []
      requestBody:
        description: two userID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwapRank'
      responses:
        '200':
          description: successful operation
  /check-password:
    post:
      tags:
        - authorization
      summary: Check whether the password is correct
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password:
                  type: string
      responses:
        '200':
          description: successful operation
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        rank:
          type: integer
        code:
          type: string
    Program:
      type: object
      required:
        - userId
        - code
      properties:
        userId:
          type: integer
        code:
          type: string
    SwapRank:
      type: object
      required:
        - userId1
        - userId2
      properties:
        userId1:
          type: integer
        userId2:
          type: integer
    